//g++ board.test.cc -o board.test -I../ -std=c++11

#include <robots_core/board.hh>

#include <iostream>
#include <cassert>
#include <algorithm>

using namespace robots_core;

bool test_deserialization(){
  Board b

  assert( b.n_robots() == 10 );
  assert( b.human_position().x == 23 );
  assert( b.human_position().y == 15 );

  Board::PositionVec expected_robots_positions({
      {2, 1},
      {7, 4},
      {7, 22},
      {15, 24},
      {18, 17},
      {18, 7}
  });

  for( Position const & ep : expected_robots_positions ){
    auto iter = std::find( ep, b.robots().begin(), b.robots().end() );
    //auto iter = std::ranges::find( b.robots(), ep );
    assert( iter != b.robots().end() );  
  }

  return true;
}

int main(){

  bool passed = true;

  passed &= test_deserialization();  

  if( passed ) return 0;
  else         return 1;

}
