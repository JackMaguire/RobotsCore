#include <robots_core/game.hh>

#include <iostream>
#include <cassert>
#include <algorithm>

namespace robots_core {
namespace tests {

struct GameTests {

  static void run(){
    bool const passed = test_init()
      && test_cascade()
      ;

    if( passed ) std::cout << "PASSED GameTests" << std::endl;
    else         std::cout << "FAILED GameTests" << std::endl;
  }

  static bool test_init(){
    RobotsGame const g;

    assert( g.round() == 1 );
    assert( g.score() == 0 );
    assert( g.board().n_robots() == 10 );

    return true;
  }

  static bool test_cascade(){
    RobotsGame g;
    g.load_from_stringified_representation(

      5, 4, 3
    );

    assert( g.round() == 5 );
    assert( g.n_safe_teleports_remaining() == 4 );
    assert( g.score() == 3 );
    assert( g.board().n_robots() == 4 );

    GameOverBool const game_over = g.cascade<0>();
    assert( not game_over );

    assert( g.latest_result() == MoveResult::YOU_WIN_ROUND );

    return true;
  }

};

} //tests
} //robots_core
