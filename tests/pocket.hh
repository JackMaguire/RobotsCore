#include <robots_core/board.hh>
#include <robots_core/pocket/pocket.hh>
#include <robots_core/asserts.hh>

#include <iostream>
#include <cassert>
#include <algorithm>
#include <stdexcept>

namespace robots_core {
namespace tests {

using namespace robots_core::pocket;

bool no_robots_in_pocket(
  Pocket const p,
  Board const b
){
  for( Position const & r : b.robots() ){
    if( p.contains_position( r ) ) return false;
  }
  return true;
}

struct PocketTests {

  static void run(){
    bool const passed = test_box_pocket_4robots()
      && test_box_pocket_1adjrobot_3OOB()
      && test_box_pocket_1robot_3OOB()
      && test_nonbox_pocket_2robot_2OOB()
      && test_past_problem1()
      ;

    if( passed ) std::cout << "PASSED PocketTests" << std::endl;
    else         std::cout << "FAILED PocketTests" << std::endl;
  }

  static bool test_box_pocket_4robots(){
    Board const b

    Pocket const p = create_pocket( b );
    
    RC_ASSERT( p.center == b.human_position() );


    { //UP Post
      Post const & post = p.up();
      RC_ASSERT( post.pos == p.center + Position({0, 1}) );
      RC_ASSERT_EQUALS( post.distance, 1 );
    }

    { //DOWN Post
      Post const & post = p.down();
      RC_ASSERT( post.pos == p.center - Position({0, 2}) );
      RC_ASSERT_EQUALS( post.distance, 2 );
    }

    { //RIGHT Post
      Post const & post = p.right();
      RC_ASSERT( post.pos == p.center + Position({1, 0}) );
      RC_ASSERT_EQUALS( post.distance, 1 );
    }

    { //LEFT Post
      Post const & post = p.left();
      RC_ASSERT( post.pos == p.center - Position({8, 0}) );
      RC_ASSERT_EQUALS( post.distance, 8 );
    }

    RC_ASSERT( p.NW_offset() == 9 );
    RC_ASSERT( p.NE_offset() == 2 );
    RC_ASSERT( p.SW_offset() == 10 );
    RC_ASSERT( p.SE_offset() == 3 );

    RC_ASSERT( no_robots_in_pocket( p, b ) );

    return true;
  }

  static bool test_box_pocket_1adjrobot_3OOB(){
    Board const b

    Pocket const p = create_pocket( b );
    RC_ASSERT( no_robots_in_pocket( p, b ) );
    
    RC_ASSERT( p.center == b.human_position() );


    { //UP Post
      Post const & post = p.up();
      RC_ASSERT( post.pos == p.center + Position({0, 22}) );
      RC_ASSERT_EQUALS( post.distance, 22 );
    }

    { //DOWN Post
      Post const & post = p.down();
      RC_ASSERT( post.pos == p.center - Position({0, 7}) );
      RC_ASSERT_EQUALS( post.distance, 7 );
    }

    { //RIGHT Post
      Post const & post = p.right();
      RC_ASSERT( post.pos == p.center + Position({7, 0}) );
      RC_ASSERT_EQUALS( post.distance, 7 );
    }

    { //LEFT Post
      Post const & post = p.left();
      RC_ASSERT( post.pos == p.center );
      RC_ASSERT_EQUALS( post.distance, 0 );
    }

    std::cout << "Diagonal Offsets: " << (int)p.NW_offset() << " " << (int)p.NE_offset() << " " << (int)p.SW_offset() << " " << (int)p.SE_offset() << std::endl;

    RC_ASSERT( p.NW_offset() == 22 );
    RC_ASSERT( p.NE_offset() == 29 );
    RC_ASSERT( p.SW_offset() == 7 );
    RC_ASSERT( p.SE_offset() == 14 );

    return true;
  }

  static bool test_box_pocket_1robot_3OOB(){
    Board const b

    Pocket const p = create_pocket( b );
    RC_ASSERT( no_robots_in_pocket( p, b ) );

    RC_ASSERT( p.center == b.human_position() );


    { //UP Post
      Post const & post = p.up();
      RC_ASSERT( post.pos == p.center + Position({0, 2}) );
      RC_ASSERT_EQUALS( post.distance, 2 );
    }

    { //DOWN Post
      Post const & post = p.down();
      RC_ASSERT( post.pos == p.center - Position({0, 3}) );
      RC_ASSERT_EQUALS( post.distance, 3 );
    }

    { //RIGHT Post
      Post const & post = p.right();
      RC_ASSERT( post.pos == p.center + Position({5, 0}) );
      RC_ASSERT_EQUALS( post.distance, 5 );
    }

    { //LEFT Post
      Post const & post = p.left();
      RC_ASSERT( post.pos == p.center - Position({39, 0}) );
      RC_ASSERT_EQUALS( post.distance, 39 );
    }

    std::cout << "Diagonal Offsets: " << (int)p.NW_offset() << " " << (int)p.NE_offset() << " " << (int)p.SW_offset() << " " << (int)p.SE_offset() << std::endl;

    RC_ASSERT( p.NW_offset() == 41 );
    RC_ASSERT( p.NE_offset() == 7 );
    RC_ASSERT( p.SW_offset() == 42 );
    RC_ASSERT( p.SE_offset() == 8 );

    return true;
  }

  static bool test_nonbox_pocket_2robot_2OOB(){
    Board const b

    Pocket const p = create_pocket( b );
    RC_ASSERT( no_robots_in_pocket( p, b ) );

    RC_ASSERT( p.center == b.human_position() );


    { //UP Post
      Post const & post = p.up();
      RC_ASSERT_EQUALS( post.distance, 5 );
    }

    { //DOWN Post
      Post const & post = p.down();
      RC_ASSERT_EQUALS( post.distance, 6 );
    }

    { //RIGHT Post
      Post const & post = p.right();
      RC_ASSERT_EQUALS( post.distance, 2 );
    }

    { //LEFT Post
      Post const & post = p.left();
      RC_ASSERT_EQUALS( post.distance, 17 );
    }

    std::cout << "Diagonal Offsets: " << (int)p.NW_offset() << " " << (int)p.NE_offset() << " " << (int)p.SW_offset() << " " << (int)p.SE_offset() << std::endl;

    RC_ASSERT( p.NW_offset() == 5 );
    RC_ASSERT( p.NE_offset() == 2 );
    RC_ASSERT( p.SW_offset() == 17 );
    RC_ASSERT( p.SE_offset() == 1 );

    return true;
  }

  /*static bool test_past_problem1(){
    Board const b("");

    Position const h = b.human_position();
    Pocket const p = create_pocket( b );
    RC_ASSERT( p.cardinal_posts[ CardinalPost::LEFT|0 ].pos.x == h.x - 5 );
    RC_ASSERT( p.cardinal_posts[ CardinalPost::LEFT|0 ].pos.y == h.y );

    RC_ASSERT( p.cardinal_posts[ CardinalPost::RIGHT|0 ].pos.x == h.x + 4 );
    RC_ASSERT( p.cardinal_posts[ CardinalPost::RIGHT|0 ].pos.y == h.y );

    RC_ASSERT( p.cardinal_posts[ CardinalPost::UP|0 ].pos.x == h.x );
    RC_ASSERT( p.cardinal_posts[ CardinalPost::UP|0 ].pos.y == h.y + 6 );

    RC_ASSERT( p.cardinal_posts[ CardinalPost::DOWN|0 ].pos.x == h.x );
    RC_ASSERT( p.cardinal_posts[ CardinalPost::DOWN|0 ].pos.y == h.y - 14 );

    return true;
  }*/

  static bool test_past_problem1(){
    Board const b("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000010000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000");

    Position const h = b.human_position();
    RC_ASSERT( h == STARTING_POSITION );

    std::cout << "..." << std::endl;
    Pocket const p = create_pocket( b );
    RC_ASSERT( no_robots_in_pocket( p, b ) );

    RC_ASSERT( p.cardinal_posts[ CardinalPost::UP|0 ].pos.x == h.x );
    RC_ASSERT( p.cardinal_posts[ CardinalPost::UP|0 ].pos.y == h.y + 2 );

    RC_ASSERT( p.cardinal_posts[ CardinalPost::DOWN|0 ].pos.x == h.x );
    RC_ASSERT( p.cardinal_posts[ CardinalPost::DOWN|0 ].pos.y == h.y - 15 );


    std::cout << (int)p.NW_offset() << std::endl;
    std::cout << p.cardinal_posts[ CardinalPost::UP|0 ].pos.x << ' ' << p.cardinal_posts[ CardinalPost::UP|0 ].pos.y << std::endl;
    std::cout << p.cardinal_posts[ CardinalPost::LEFT|0 ].pos.x << ' ' << p.cardinal_posts[ CardinalPost::LEFT|0 ].pos.y << std::endl;
    RC_ASSERT( p.NW_offset() == 7 );

    return true;
  }

};

} //tests
} //robots_core
